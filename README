Zorpher is primed to be a PAM authentication module that will authenticate the user against the server's /etc/shadow file.  There were considerations to use a different database for this (such as a custom one), but as the benefits of using /etc/shadow outweigh the other options, this seemd to be the most viable option.  The issue with using a custom database is wanting to make Zorpher as independent as possible.  By this, Zorpher should be able to be compiled with Linux-only headers, no requirements on third-party libraries.  While coding an MD5 table, for example, could be self-coded, it was determined early on in the thought process that this is simply the best way to handle authentication.  Please read INSTALL for more information on compiling, installing and using Zorpher.

Zorpher is a "forked" version of an earlier project, Viegenere Cipher 2011 (VC2011).  There are two main differences between the two:

1.  Zorpher is written in C++
2.  Zorpher is built to be more expandable

During the process of writing VC2011, the code was constantly getting changed and mangled.  As such, memory management quickly got out of hand.  Soon, the choice to re-write the entire program in C++ became more and more logical.

Zorpher utilizes more recent advancements, as well.  Some of these features include:

1.  Using epoll() instead of select() to manage the sockets
2.  Setting non-blocking sockets through fcntl(), or ioctl() if fcntl() is not supported.
3.  Using std namespace for string and others to ease the memory management
4.  Setting the TCP_NODELAY option to disable the Nigale Algorithm
	+ This was done for one reason: the Nigale Algorithm is great if your payload is big.  However, and this seems to be the cause for the earlier issues, if your payload is less than 40 bytes (TCP/IP header length), the algorithm pretty much forces multiple reads/sends into the buffer.  This is not efficient for this authentication module.

In writing this revised version, there's two main goals:

1.  Make it more robust when it comes to connections and polling
2.  Have the network code work properly

The development cycle of Zorpher will be as follows:

1.  Ensure network code is properly coded.
	+ One of the main issues previously is that as long as a constant send/recv stream as performed, the code worked fine.  However, once it ventured into send/send/recv and the like, several issues occurred that made it quite difficult to get back into working order.
2.  Implement the Viegenere Cipher
	+ The vc.h code in the previous part works just fine for this.  However, this will be re-written to be more C++ compliant, which will help tremendously
3.  Implement a key exchange
	+ This will semi-depend on if the user wants GMP (and subsequently GMPxx) used as well.  If so, a lot of possibilities to this will be available.  However, even if GMP isn't wanting to be used, then some more simplistic designs will be available.  This is not to force GMP to be used, but due to the restrictions of uint64, GMP allows for vast greater capabilities when it comes to this.

Please note that while GMP is available to be used, due to most users not having data more than 10-20 characters, GMP is optional.  Its usage is only for the key exchange to provide large integers to help in the aid of cryptography.

The implementation of Viegenere Cipher is simple.  However, to aide in the one-time pad (OTP) system, the key will have a very low residue.  The implementation of a key exchange will be used to encrypt the Viegenere Cipher data (including the key itself).  However, if a key exchange isn't used, the chance of the key being reusable is very small, as the key is based off /dev/urandom.
